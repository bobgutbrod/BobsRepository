package stream;
import java.util.HashMap;
import java.util.Map;
 
/**
 *The most common class that implements the Map interface is the Java HashMap. 
 *A HashMap is a hash table-based implementation of the Map interface. 
 *It permits null keys and values. Also, this class does not maintain any order among 
 *its elements and especially, it does not guarantee that the order will remain constant over 
 *time. Finally, a HashMap contains two fundamental parameters: initial capacity and performance. 
 *The capacity is defined as the number of buckets in the hash table, while the load factor 
 *is a measure that indicates the maximum value the hash table can reach, before being 
 *automatically increased.
 *
 */
public class HashMapExample {
	/**
	 our HashMap was created with the default initial capacity (16) and the default load 
	 factor (0.75). Also, the threshold is 16 * 0.75 = 12, which means that it will increase 
	 the capacity from 16 to 32 after the 12th entry (key-value-pair) is added.
	 *
	 */
public static void test1(String string) {
    	//create an empty Map with an initial capacity of 5 and a load factor of 0.5.
		//Map<String, String> mapWithInitialCapacityAndLF = new HashMap<>(5, 0.5f);
	// when the load factor increases, the complexity increases. Rehashing is done to 
	// maintain a low load factor and low complexity for all the operations.
		Map<String, String> mapWithInitialCapacityAndLF = new HashMap<>(5,0.75f);
		mapWithInitialCapacityAndLF.put("1", "one");
		mapWithInitialCapacityAndLF.put("2", "two");
		mapWithInitialCapacityAndLF.put("3", "three");
		mapWithInitialCapacityAndLF.put("4", "four");
		mapWithInitialCapacityAndLF.put("5", "five");
		mapWithInitialCapacityAndLF.put("6", "Six");
		mapWithInitialCapacityAndLF.put("7", "Seven");
		//core-java-modules/core-java-collections-maps-3/src/main/java/com/baeldung/map/propertieshashmap/PropertiesToHashMapConverter.java
		mapWithInitialCapacityAndLF.put("15", "fifteen");
		String myGet = mapWithInitialCapacityAndLF.get("1");
		
    	// It will create an empty Map with the initial capacity (5) and the default load factor (0.75).
    	Map<String, String> mapWithInitialCapacity = new HashMap<>(5);
    	
    	mapWithInitialCapacityAndLF.put("1", "one");
    	mapWithInitialCapacityAndLF.put("2", "two");
    	mapWithInitialCapacityAndLF.put("3", "three");
    	mapWithInitialCapacityAndLF.put("4", "four");
}
 
    public static void main(String[] args) {
    	
    	test1("test1");
    	
    	Map<String, String> mapWithDefaultParams = new HashMap<>();
    	mapWithDefaultParams.put("1", "one");
    	mapWithDefaultParams.put("2", "two");
    	mapWithDefaultParams.put("3", "three");
    	mapWithDefaultParams.put("4", "four");
    	
    	Map<String, Integer> vehicles = new HashMap<>();
 
        // Add some vehicles.
        vehicles.put("BMW", 5);
        vehicles.put("Mercedes", 3);
        vehicles.put("Audi", 4);
        vehicles.put("Ford", 10);
 
        System.out.println("Total vehicles: " + vehicles.size());
 
        // Iterate over all vehicles, using the keySet method.
        for (String key : vehicles.keySet())
            System.out.println(key + " - " + vehicles.get(key));
        System.out.println();
 
        String searchKey = "Audi";
        if (vehicles.containsKey(searchKey))
            System.out.println("Found total " + vehicles.get(searchKey) + " " + searchKey + " cars!\n");
 
        // Clear all values.
        vehicles.clear();
 
        // Equals to zero.
        System.out.println("After clear operation, size: " + vehicles.size());
    }
}
